* Phase 2 Project
** Title
<2022-07-23 Sat 18:19>: The title that I have decided upon is the following:
- 'BackToTheDrawingBoard'
** Ideas
<2022-07-23 Sat 18:19>: Here are some major ideas I have for this project:
- This will be a drawing board web app where you can upload images, position them, and resize them
- You can then add tags to images that appear upon a 'hover' event
** Layout
<2022-07-23 Sat 18:20>: The overall layout and component hierarchy will be as follows:
- App.js: This will load all of the components
-- About.js: This will be an informative page that contains just a few headers and paragraphs that describe the web app itself as more of a 'welcome' page
-- Upload.js: This page will contain a related form that will allow the user to upload their given images to the app, which will NOT be persistent but just remain for that specific session
-- Board.js: This will be the primary section of the site where the user can view images, rotate images upon a hover icon, tag them, and favorite them. There will be a filter for favorites as well near the top of the page.
** Routing
<2022-07-23 Sat 19:58>: I need to adjust the routing to add routes in the 'App' component to switch given routes depending on user clicks as well

<2022-07-25 Mon 18:16>: This will include a 'NavBar' component that will display the following links:
- About
- Upload
- Board
** How I Created The Foundation For The App
<2022-07-25 Mon 18:20>: I forgot in my initial steps to create the basic 'create-react-app' as this is responsible for handling a lot of the backend for the necessary React app, so I moved over my files to a temporary directory, and ran this command accordingly:
#+begin_src bash
npx create-react-app react-gh
#+end_src

I then removed all the contents except for 'App.js' and 'index.js'.

I then replaced the contents of 'App.js' with these contents:
#+begin_src bash
function App() {
 return (
 <div>
 <h2>Github Pages</h2>
 <h3>Deploying React to Github</h3>
 </div>
 );
}
export default App;
#+end_src

I then created the 'About.js' component:
#+begin_src js
const About = () => {
 return (
 <div>
 <Link to="/">Home</Link>
 <h2>About Page</h2>
 </div>
 );
}
export default About;
#+end_src

I then did this command accordingly to install the routing components:
#+begin_src bash
npm install react-router-dom
#+end_src

After messing with a few of the internals of the app itself in conjunction to primarily feature the 'HashRouter' component so that GitHub Pages properly renders the pages involved, I then ran this npm command to install 'gh-pages' for the project itself:
#+begin_src bash
npm install gh-pages
#+end_src

I then went to the 'package.json' file for the app itself, and added the website's "homepage" key value accordingly:
#+begin_src json
"homepage": "https://samuelbanya.github.io/BackToTheDrawingBoard",
"scripts": {
 "predeploy": "npm run build",
 "deploy": "gh-pages -d build",
 "start": "react-scripts start",
 "build": "react-scripts build",
 "test": "react-scripts test",
 "eject": "react-scripts eject"
 }
#+end_src

I then ran the following command to deploy the website:
#+begin_src bash
npm run deploy
#+end_src
** How I Created The 'Theme' Component
<2022-07-31 Sun 11:22>: I used these two labs as a reference for how to change the CSS stylesheet:
- React Information Flow:
- https://learning.flatironschool.com/courses/5285/assignments/172480?module_item_id=376334
- https://github.com/SamuelBanya/react-hooks-information-flow-code-along
- React State Lab:
- https://learning.flatironschool.com/courses/5285/assignments/172504?module_item_id=376329
- https://github.com/SamuelBanya/react-hooks-state-and-events-lab

** How I Managed To Create The 'Upload' Component
<2022-07-31 Sun 11:11>: I created a React controlled form based upon this lab, 'React Forms Submit':
- https://learning.flatironschool.com/courses/5285/assignments/172477?module_item_id=376340

This contains event handlers that are triggered upon the 'onChange' event.

When these events are triggered, the 'useState' hook is called to store the user's stored value into the 'state' variable present.

<2022-08-01 Mon 18:38>: Unfortunately, the instructor didn't show up for the office hour today at 6 PM EDT.

I needed to go over the issue I am currently facing which is to make the 'fetch()' request for the 'https://my-json-server.typicode.com/SamuelBanya/BackToTheDrawingBoard' API endpoint accordingly
** How I Continued To Struggle To Deploy The Actual App
<2022-08-03 Wed 19:14>: Over the last few days, I have tried the following tasks:
- Deploying the actual Phase 2 project to GitHubPages.io --> This ended terribly since the forced 'db.json' requirement basically makes this kind of static site option impossible to work with
- Deploying the Phase 2 project to Netlify --> Too confusing, and had no idea what I was doing so I abandoned this quickly
- Deploying the Phase 2 project locally and to my website: This is a current work in progress, and is probably my only shot at actually making this work
** How I Struggled With Getting V6 Routing To Actually Work
<2022-08-03 Wed 19:16>: As of this blog post, I have been forced to use V6 style routing by React themselves:
- https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-client-rendering-apis

I also tried using this blog post as a reference as well:
- https://sagarkudu.medium.com/migrate-react-routing-from-v5-to-v6-step-by-step-75399ac8dc4b

Overall, anything I learned regarding actual '<Switch>' blocks for routing is completely useless, as it is replaced by using '<Routes>' instead.

Also, I have no idea how to actually make the routes work as a result, which is frustrating since I don't have help from any TC's, and the office hours for this project are usually during work hours which makes it impossible for my actual job.

I have since asked for help in our Slack channel for our cohort, and tagged the instructor.

<2022-08-04 Thu 19:28>: I then was able to get help this morning from one of the cohort instructors named Demetrio who then told me about this particular page as a reference guide for V6 routing:
- https://reactrouter.com/docs/en/v6/getting-started/overview

The main solution to this problem was installing the 'v6' component accordingly:
#+begin_src bash
npm install react-router-dom@6
#+end_src

After doing this installation action and modifying the routes to have '<Routes>' and '<Route>' component sections accordingly, I was able to get the project up and running
** How I Selected An Image Gallery Component From NPM
<2022-08-04 Thu 19:31>: After a bit of research, I was able to find out a cool photo based library to use, aka 'react-photo-album':
- https://www.npmjs.com/package/react-photo-album

Also, I found a great sandbox example that does the exact functionality I want to do:
- https://codesandbox.io/s/w66dc

The problem with the above example is that it is completely based from Typescript, so it would have to be compiled with the following command accordingly just for to even work:
#+begin_src bash
tsc app.tsx
#+end_src

I then installed several of the related dependencies such as (https://www.npmjs.com/package/clsx) and 'react-photo-album' itself:
#+begin_src bash
npm install clsx
npm install react-photo-album
#+end_src

The problem was then trying to figure out how on earth to even utilize this in my project.

At this point, I will need to find another image framework on NPM that offers this kind of functionality.

<2022-08-04 Thu 19:52>: I also found the 'moveable' library which might do the same task as well:
- https://github.com/daybrush/moveable

I found it through this CodeSandbox demo:
- https://codesandbox.io/s/react-moveable-image-fk2lt

<2022-08-04 Thu 19:55>: I also found these two libraries to consider:
- https://konvajs.org/docs/react/index.html
- https://github.com/Flipboard/react-canvas

<2022-08-05 Fri 15:04>: Here are the finds from today's research:

I found this random library that allows you to to pan, zoom, and rotate images individually:
- https://github.com/vianuvem-vn/vn-react-image-pan-zoom-rotate

The related live demo however uses Typescript, so I don't know if this is fair game in this context:
- https://codesandbox.io/s/n1rv671pkj?file=/src/index.tsx

This appears to be a standalone zoom, image, and rotate library for React images, but doesn't have a corresponding demo section:
- https://github.com/chiaweilee/react-image-zoom-rotate

This is a great CodeSandbox demo that shows how to rotate images, zoom in and out, and reset them, which utilizes the 'Draggable' library
- https://codesandbox.io/s/4rznnjz539?file=/src/index.js:84-99

This is the pinnacle find today, as this is the single library I was looking for, which would be to be able to drag items across a screen, aka 'Draggable':
- https://www.npmjs.com/package/react-draggable

This is a live demo site showcasing how to utilize 'Draggable' as well as its corresponding source code:
- http://react-grid-layout.github.io/react-draggable/example/
- https://github.com/react-grid-layout/react-draggable/blob/HEAD/example/example.js

This is a wonderful example that showcases exactly what I wanted to do, which was to drag images across a canvas, and to actually resize them:
- https://stackblitz.com/edit/react-draggable-and-resizable-pictures?file=index.js

<2022-08-05 Fri 15:11>: I then decided to base my 'Board' component upon this example:
- https://stackblitz.com/edit/react-draggable-and-resizable-pictures?file=index.js

I did the following actions:
#+begin_src bash
npm install re-resizable
npm install react-draggable
#+end_src

<2022-08-05 Fri 15:51>: With a bit of manipulation, I was able to utilize the demo from the NPM page's example and get it working with an example Div tag, but with a 'function' component standpoint and not by using a 'Class' component like the example on the Docs page:
- https://www.npmjs.com/package/react-draggable

I now am trying to solve the issue of the CSS styling itself since it appears as a text cursor when I hover over 'Drag from here' section.

I am examining the related source code as well as its corresponding HTML page so that I can at least get the styling to match what is present:
- https://github.com/react-grid-layout/react-draggable/blob/HEAD/example/example.js
- https://github.com/react-grid-layout/react-draggable/blob/44a8c6ed103ec6c0a4dda5faf7f8ebca16f9b325/example/index.html

<2022-08-06 Sat 16:23>: My current issue is that I pretty much just utilized the exact example that I wanted to use:
- https://stackblitz.com/edit/react-draggable-and-resizable-pictures?file=index.js

The problem with this is that the person opted for using a 'Class' instead of a 'Function' which completely is beyond the scope of the entire course.

I don't know how I can re-add my state variables with this in mind unfortunately.

I will proceed with the 'theme' section and return to this issue later since at least I got one working image that works for now.

The only thing I can think of later to add the corresponding 'tags' would be to add a bottom bar on the page that would display tags, display tags below each image, or add a corresponding side bar to the page with 'tags'.

I have to either add tags to the bottom of the page or the image itself because this will scale badly with mobile devices however.

<2022-08-06 Sat 16:43>: One other thing I need to consider is when I actually DO get multiple images to display, I will actually have to know the actual width and height of each one.

The reason why that example one works is that they manually determined the width, and height of each image on the page.

I researched a few libraries on NPM, and found this one in particular called 'probe-image-size' which when given a specific image, it will return the 'width' and 'height' of the requested image:
- https://www.npmjs.com/package/probe-image-size

The more specific example of this is the 'Using a URL' example on their GitHub page itself:
- https://github.com/image-size/image-size

** How I Added The 'theme' Component to change the CSS styling of the web app itself
<2022-08-06 Sat 16:26>: I based the idea to change the CSS of the page itself with the related Grocery Store list app we made a while back which incorporates a 'Dark' and 'Light' mode:
- https://learning.flatironschool.com/courses/5285/assignments/172504?module_item_id=376329
- https://github.com/SamuelBanya/react-hooks-state-and-events-lab
