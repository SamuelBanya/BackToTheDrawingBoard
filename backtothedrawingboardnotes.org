* Phase 2 Project
** Title
<2022-07-23 Sat 18:19>: The title that I have decided upon is the following:
- 'BackToTheDrawingBoard'
** Ideas
<2022-07-23 Sat 18:19>: Here are some major ideas I have for this project:
- This will be a drawing board web app where you can upload images, position them, and resize them
- You can then add tags to images that appear upon a 'hover' event
** Layout
<2022-07-23 Sat 18:20>: The overall layout and component hierarchy will be as follows:
- App.js: This will load all of the components
-- About.js: This will be an informative page that contains just a few headers and paragraphs that describe the web app itself as more of a 'welcome' page
-- Upload.js: This page will contain a related form that will allow the user to upload their given images to the app, which will NOT be persistent but just remain for that specific session
-- Board.js: This will be the primary section of the site where the user can view images, rotate images upon a hover icon, tag them, and favorite them. There will be a filter for favorites as well near the top of the page.
** Routing
<2022-07-23 Sat 19:58>: I need to adjust the routing to add routes in the 'App' component to switch given routes depending on user clicks as well

<2022-07-25 Mon 18:16>: This will include a 'NavBar' component that will display the following links:
- About
- Upload
- Board
** How I Created The Foundation For The App
<2022-07-25 Mon 18:20>: I forgot in my initial steps to create the basic 'create-react-app' as this is responsible for handling a lot of the backend for the necessary React app, so I moved over my files to a temporary directory, and ran this command accordingly:
#+begin_src bash
npx create-react-app react-gh
#+end_src

I then removed all the contents except for 'App.js' and 'index.js'.

I then replaced the contents of 'App.js' with these contents:
#+begin_src bash
function App() {
 return (
 <div>
 <h2>Github Pages</h2>
 <h3>Deploying React to Github</h3>
 </div>
 );
}
export default App;
#+end_src

I then created the 'About.js' component:
#+begin_src js
const About = () => {
 return (
 <div>
 <Link to="/">Home</Link>
 <h2>About Page</h2>
 </div>
 );
}
export default About;
#+end_src

I then did this command accordingly to install the routing components:
#+begin_src bash
npm install react-router-dom
#+end_src

After messing with a few of the internals of the app itself in conjunction to primarily feature the 'HashRouter' component so that GitHub Pages properly renders the pages involved, I then ran this npm command to install 'gh-pages' for the project itself:
#+begin_src bash
npm install gh-pages
#+end_src

I then went to the 'package.json' file for the app itself, and added the website's "homepage" key value accordingly:
#+begin_src json
"homepage": "https://samuelbanya.github.io/BackToTheDrawingBoard",
"scripts": {
 "predeploy": "npm run build",
 "deploy": "gh-pages -d build",
 "start": "react-scripts start",
 "build": "react-scripts build",
 "test": "react-scripts test",
 "eject": "react-scripts eject"
 }
#+end_src

I then ran the following command to deploy the website:
#+begin_src bash
npm run deploy
#+end_src
** How I Created The 'Theme' Component
<2022-07-31 Sun 11:22>: I used these two labs as a reference for how to change the CSS stylesheet:
- React Information Flow:
- https://learning.flatironschool.com/courses/5285/assignments/172480?module_item_id=376334
- https://github.com/SamuelBanya/react-hooks-information-flow-code-along
- React State Lab:
- https://learning.flatironschool.com/courses/5285/assignments/172504?module_item_id=376329
- https://github.com/SamuelBanya/react-hooks-state-and-events-lab

** How I Managed To Create The 'Upload' Component
<2022-07-31 Sun 11:11>: I created a React controlled form based upon this lab, 'React Forms Submit':
- https://learning.flatironschool.com/courses/5285/assignments/172477?module_item_id=376340

This contains event handlers that are triggered upon the 'onChange' event.

When these events are triggered, the 'useState' hook is called to store the user's stored value into the 'state' variable present.

<2022-08-01 Mon 18:38>: Unfortunately, the instructor didn't show up for the office hour today at 6 PM EDT.

I needed to go over the issue I am currently facing which is to make the 'fetch()' request for the 'https://my-json-server.typicode.com/SamuelBanya/BackToTheDrawingBoard' API endpoint accordingly
** How I Continued To Struggle To Deploy The Actual App
<2022-08-03 Wed 19:14>: Over the last few days, I have tried the following tasks:
- Deploying the actual Phase 2 project to GitHubPages.io --> This ended terribly since the forced 'db.json' requirement basically makes this kind of static site option impossible to work with
- Deploying the Phase 2 project to Netlify --> Too confusing, and had no idea what I was doing so I abandoned this quickly
- Deploying the Phase 2 project locally and to my website: This is a current work in progress, and is probably my only shot at actually making this work
** How I Struggled With Getting V6 Routing To Actually Work
<2022-08-03 Wed 19:16>: As of this blog post, I have been forced to use V6 style routing by React themselves:
- https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-client-rendering-apis

I also tried using this blog post as a reference as well:
- https://sagarkudu.medium.com/migrate-react-routing-from-v5-to-v6-step-by-step-75399ac8dc4b

Overall, anything I learned regarding actual '<Switch>' blocks for routing is completely useless, as it is replaced by using '<Routes>' instead.

Also, I have no idea how to actually make the routes work as a result, which is frustrating since I don't have help from any TC's, and the office hours for this project are usually during work hours which makes it impossible for my actual job.

I have since asked for help in our Slack channel for our cohort, and tagged the instructor.

<2022-08-04 Thu 19:28>: I then was able to get help this morning from one of the cohort instructors named Demetrio who then told me about this particular page as a reference guide for V6 routing:
- https://reactrouter.com/docs/en/v6/getting-started/overview

The main solution to this problem was installing the 'v6' component accordingly:
#+begin_src bash
npm install react-router-dom@6
#+end_src

After doing this installation action and modifying the routes to have '<Routes>' and '<Route>' component sections accordingly, I was able to get the project up and running
** How I Selected An Image Gallery Component From NPM
<2022-08-04 Thu 19:31>: After a bit of research, I was able to find out a cool photo based library to use, aka 'react-photo-album':
- https://www.npmjs.com/package/react-photo-album

Also, I found a great sandbox example that does the exact functionality I want to do:
- https://codesandbox.io/s/w66dc

The problem with the above example is that it is completely based from Typescript, so it would have to be compiled with the following command accordingly just for to even work:
#+begin_src bash
tsc app.tsx
#+end_src

I then installed several of the related dependencies such as (https://www.npmjs.com/package/clsx) and 'react-photo-album' itself:
#+begin_src bash
npm install clsx
npm install react-photo-album
#+end_src

The problem was then trying to figure out how on earth to even utilize this in my project.

At this point, I will need to find another image framework on NPM that offers this kind of functionality.

<2022-08-04 Thu 19:52>: I also found the 'moveable' library which might do the same task as well:
- https://github.com/daybrush/moveable

I found it through this CodeSandbox demo:
- https://codesandbox.io/s/react-moveable-image-fk2lt

<2022-08-04 Thu 19:55>: I also found these two libraries to consider:
- https://konvajs.org/docs/react/index.html
- https://github.com/Flipboard/react-canvas

<2022-08-05 Fri 15:04>: Here are the finds from today's research:

I found this random library that allows you to to pan, zoom, and rotate images individually:
- https://github.com/vianuvem-vn/vn-react-image-pan-zoom-rotate

The related live demo however uses Typescript, so I don't know if this is fair game in this context:
- https://codesandbox.io/s/n1rv671pkj?file=/src/index.tsx

This appears to be a standalone zoom, image, and rotate library for React images, but doesn't have a corresponding demo section:
- https://github.com/chiaweilee/react-image-zoom-rotate

This is a great CodeSandbox demo that shows how to rotate images, zoom in and out, and reset them, which utilizes the 'Draggable' library
- https://codesandbox.io/s/4rznnjz539?file=/src/index.js:84-99

This is the pinnacle find today, as this is the single library I was looking for, which would be to be able to drag items across a screen, aka 'Draggable':
- https://www.npmjs.com/package/react-draggable

This is a live demo site showcasing how to utilize 'Draggable' as well as its corresponding source code:
- http://react-grid-layout.github.io/react-draggable/example/
- https://github.com/react-grid-layout/react-draggable/blob/HEAD/example/example.js

This is a wonderful example that showcases exactly what I wanted to do, which was to drag images across a canvas, and to actually resize them:
- https://stackblitz.com/edit/react-draggable-and-resizable-pictures?file=index.js

<2022-08-05 Fri 15:11>: I then decided to base my 'Board' component upon this example:
- https://stackblitz.com/edit/react-draggable-and-resizable-pictures?file=index.js

I did the following actions:
#+begin_src bash
npm install re-resizable
npm install react-draggable
#+end_src

<2022-08-05 Fri 15:51>: With a bit of manipulation, I was able to utilize the demo from the NPM page's example and get it working with an example Div tag, but with a 'function' component standpoint and not by using a 'Class' component like the example on the Docs page:
- https://www.npmjs.com/package/react-draggable

I now am trying to solve the issue of the CSS styling itself since it appears as a text cursor when I hover over 'Drag from here' section.

I am examining the related source code as well as its corresponding HTML page so that I can at least get the styling to match what is present:
- https://github.com/react-grid-layout/react-draggable/blob/HEAD/example/example.js
- https://github.com/react-grid-layout/react-draggable/blob/44a8c6ed103ec6c0a4dda5faf7f8ebca16f9b325/example/index.html

<2022-08-06 Sat 16:23>: My current issue is that I pretty much just utilized the exact example that I wanted to use:
- https://stackblitz.com/edit/react-draggable-and-resizable-pictures?file=index.js

The problem with this is that the person opted for using a 'Class' instead of a 'Function' which completely is beyond the scope of the entire course.

I don't know how I can re-add my state variables with this in mind unfortunately.

I will proceed with the 'theme' section and return to this issue later since at least I got one working image that works for now.

The only thing I can think of later to add the corresponding 'tags' would be to add a bottom bar on the page that would display tags, display tags below each image, or add a corresponding side bar to the page with 'tags'.

I have to either add tags to the bottom of the page or the image itself because this will scale badly with mobile devices however.

<2022-08-06 Sat 16:43>: One other thing I need to consider is when I actually DO get multiple images to display, I will actually have to know the actual width and height of each one.

The reason why that example one works is that they manually determined the width, and height of each image on the page.

I researched a few libraries on NPM, and found this one in particular called 'probe-image-size' which when given a specific image, it will return the 'width' and 'height' of the requested image:
- https://www.npmjs.com/package/probe-image-size

The more specific example of this is the 'Using a URL' example on their GitHub page itself:
- https://github.com/image-size/image-size

<2022-08-07 Sun 16:22>: I did some research to make sure I was on the right path to be able to just use a standard React 'Function' component instead of a 'Class' component, and found these two examples that seem to use 'Draggable' and 're-resizable' with just 'Function' components, so I am clearly on the right track:
- Using 'Draggable' with a 'Function' React component:
- https://blog.logrocket.com/create-draggable-components-react-draggable/
- Using 're-resizable' with a 'Function' React component, NOTE: This example actually offers good ideas on how to use the 'useState' hook as well for this scenario to determine the 'width' and 'height':
- https://www.tutorialspoint.com/how-to-make-a-resizable-element-in-react-js

The issue I am facing now is that no matter what I do, I cannot get the 'Resizable' component to be returned as JSX with brackets, {} inside ther 'return' block of the 'Board' component.

So far, if I place a '<div>' tag after the '<Draggable>' tag, and before the '<Resizeable>' tag, it allows me to evaluate code blocks accordingly, but any other variation just isn't allowed for some reason:
#+begin_src js
        {photos
          ? photos.map((photo) => console.log("photo (from.map()): ", photo))
          : console.log("photos not present")}
#+end_src

<2022-08-07 Sun 16:36>: I'm not sure if this matters completely, but I found a similar example that ONLY uses a 'Function' React component that might be similar in this scenario:
- https://codesandbox.io/s/xp9p7272m4

<2022-08-08 Mon 18:28>: I realized that I wasn't actually returning a JSX component for the default expression for the ternary statement, so after using the following 'return' statement, I was back on the track for my project:

I went from this:
#+begin_src js
  return (
    <Draggable>
      <div>
        {photos ? (
          photos.map((photo) => {
            console.log("photo (from.map()): ", photo);
            console.log("imageUrl: ", imageUrl);
          })
        ) : (
          <Resizable
            defaultSize={{
              width: 200,
              height: 360,
            }}
            style={{
              background: `url(${imageUrl})`,
              backgroundSize: "contain",
              backgroundRepeat: "no-repeat",
            }}
            lockAspectRatio={true}
          ></Resizable>
        )}
      </div>
    </Draggable>
  );
#+end_src

To this:
#+begin_src js
  return (
    <Draggable>
      <div>
        {photos ? (
          photos.map((photo) => {
            console.log("photo (from.map()): ", photo);
            console.log("imageUrl: ", imageUrl);

            return (
              <Resizable
                defaultSize={{
                  width: 200,
                  height: 360,
                }}
                style={{
                  background: `url(${imageUrl})`,
                  backgroundSize: "contain",
                  backgroundRepeat: "no-repeat",
                }}
                lockAspectRatio={true}
              ></Resizable>
            );
          })
        ) : (
          <Resizable
            defaultSize={{
              width: 200,
              height: 360,
            }}
            style={{
              background: `url(${imageUrl})`,
              backgroundSize: "contain",
              backgroundRepeat: "no-repeat",
            }}
            lockAspectRatio={true}
          ></Resizable>
        )}
      </div>
    </Draggable>
  );
#+end_src

<2022-08-08 Mon 18:51>: After looking at the contents of 'db.json', I then figured out how to iterate through the entire object itself since it consists of the following components:
- The entire response is an object itself
- Within this object, there is a 'photos' key that contains an array
- This is an array of objects
- Inside this array is a key value called 'dataArray', which itself contains a key value of an array with an object inside of it
- Inside this object, there are two key values, 'photoName', and 'photoLink'

This is an example of this output only containing two example images:
#+begin_src json
{
  "photos": [
    {
      "dataArray": [
        {
          "photoName": "Garfield",
          "photoLink": "https://en.wikipedia.org/wiki/Garfield_%28character%29#/media/File:Garfield_the_Cat.svg"
        }
      ],
      "id": 1
    },
    {
      "dataArray": [
        {
          "photoName": "Odie",
          "photoLink": "https://upload.wikimedia.org/wikipedia/en/thumb/a/a6/Odie_the_Dog.svg/1200px-Odie_the_Dog.svg.png"
        }
      ],
      "id": 2
    }
  ]
}
#+end_src

I then figured out I could also print these to console with these two statements:
#+begin_src js
  console.log(
    'photo["dataArray"][0]["photoName"]: ',
    photo["dataArray"][0]["photoName"]
  );

  console.log(
    'photo["dataArray"][0]["photoLink"]: ',
    photo["dataArray"][0]["photoLink"]
  );
#+end_src

<2022-08-10 Wed 19:36>: I then further refactored the code so that I would encapsulate the entire 'photo' objects that I was iterating over within a 'fetch()' call, and return a JSX value that would contain each individual 'Photo' child component which contained the 'key', 'photoName' and 'photoLink' props I passed down

This is shown within this snippet:
#+begin_src js
  const photoToDisplay = photos.map((photo) => {
    return (
      <div>
        <Photo
          key={photo["dataArray"][0]["photoName"]}
          photoName={photo["dataArray"][0]["photoName"]}
          photoLink={photo["dataArray"][0]["photoLink"]}
        />
      </div>
    );
  });

  return <div>{photoToDisplay}</div>;
#+end_src

Then, within the 'Photo' component, I modified the 'return' statement so that each returned JSX object would contain a '<Draggable>' and '<Resizable>' component. This is shown in the following 'return' section of the 'Photo.js' component:
#+begin_src js
  return (
    <Draggable>
      <Resizable
        className="imgClass"
        defaultSize={{
          width: 200,
          height: 360,
        }}
        style={{
          background: `url(${photoLink})`,
          backgroundSize: "contain",
          backgroundRepeat: "no-repeat",
        }}
        lockAspectRatio={true}
      >
        <button onClick={handleDeletePhoto}>❌</button>
      </Resizable>
    </Draggable>
  );
}
#+end_src

** How I Added The 'theme' Component to change the CSS styling of the web app itself
<2022-08-06 Sat 16:26>: I based the idea to change the CSS of the page itself with the related Grocery Store list app we made a while back which incorporates a 'Dark' and 'Light' mode:
- https://learning.flatironschool.com/courses/5285/assignments/172504?module_item_id=376329
- https://github.com/SamuelBanya/react-hooks-state-and-events-lab

<2022-08-09 Tue 20:30>: That specific example utilizes the 'App.js' as the parent component to have the decisions brought up to it.

I am still struggling with how to pass up the 'appClass' prop so that the 'Theme' component could ultimately change each of the individual page components which include the following:
- About
- Upload
- Board

For the time being as a workaround, I used 'App light' as the value for the 'className' attribute for each of the components mentioned above.

<2022-08-10 Wed 19:34>: I resolved this issue by using a callback function, specifically, 'setTheme' within the 'Theme' component itself:
#+begin_src js
function Theme({ setTheme }) {
  return (
    <div>
      <h2>Theme</h2>
      <h3>Change the theme of the page:</h3>
      <label htmlFor="themeSelect">Choose a theme:</label>
      <select onChange={setTheme} id="themeSelect" name="themeSelect">
        <option value="App light">Light</option>
        <option value="App dark">Dark</option>
        <option value="App wood">Wood</option>
        <option value="App retro">Retro</option>
      </select>
      <br />
      <br />
    </div>
  );
}
#+end_src

I then moved over the 'useState' functions for 'theme' and 'setTheme' to the parent 'App.js' component, and called a local 'handleTheme' function that used 'setTheme()' accordingly to change the theme as shown by this revision:
#+begin_src js
import NavBar from "./NavBar";
import { Routes, Route } from "react-router-dom";
import About from "./About";
import Upload from "./Upload";
import Board from "./Board";
import Theme from "./Theme";
import React, { useState, useEffect } from "react";

function App() {
  const [theme, setTheme] = useState("");

  function handleTheme(event) {
    console.log("event.target.value: ", event.target.value);
    setTheme(event.target.value);
  }

  useEffect(() => {
    setTheme("App light");
  }, []);

  return (
    <div id="root" className={theme}>
      <NavBar />
      <Theme setTheme={handleTheme} />
      <Routes>
        <Route path="/" element={<About />} />
        <Route path="/upload" element={<Upload />} />
        <Route path="/board" element={<Board />} />
      </Routes>
    </div>
  );
}
export default App;
#+end_src

With this in mind, I was able to change the theme of the overall app successfully.
** How I Was Able To Change The App's Header Font To 'Back To The Future' Styled Font
<2022-08-09 Tue 21:07>: I referenced this Digital Ocean article on how to actually do this:
- https://www.digitalocean.com/community/tutorials/how-to-load-and-use-custom-fonts-with-css

I basically downloaded the font from a related font site:
- https://www.dafont.com/back-to-the-future.font

I then unzipped the contents of the related zip file, and placed the 'BTTF.tff' font file within the 'src' directory of my project.

I then made the following changes to the 'index.css' Stylesheet accordingly to include a reference to the '@font-face' CSS variable:
#+begin_src css
/* Loading custom 'Back To The Future' Font: */
@font-face {
  font-family: "Back To The Future";
  src: url("BTTF.ttf");
}
#+end_src

I then added a section for the 'AppHeader' class itself in the same 'index.css' stylesheet:
#+begin_src css
.AppHeader {
  font-family: "Back to The Future";
}
#+end_src

I then made sure to import the same stylesheet at the top of the 'NavBar.js' component:
#+begin_src js
import "./index.css";
#+end_src

I then applied the 'className' to the matching header, and it caused the font to successfully appear within the header of the app itself:
#+begin_src html
      <h1 className="AppHeader">Back & Drawing Board:</h1>
#+end_src
** How I Was Able To Add A Red Border Around Each Image
<2022-08-10 Wed 19:33>: I was able to add the className="imgClass" attribute value to 'Photo.js', which then corresponded to the 'imgClass' related CSS style class I had made earlier within 'index.css'
** How I Was Able To Add Delete Functionality For Each Image
<2022-08-11 Thu 18:31>: After a bit of research, I was able to determine how to delete photos from 'db.json' by using the following workflow.

Inside the parent 'Board.js' component, I made sure that I passed down the 'id' value from the 'photo["id"]' result to the child 'Photo.js' component as an attribute to '<Photo>' itself.

Within the 'Photo.js' child component, I then set an 'id' attribute to the 'props' based 'id' value I sent down to the individual '<Resizable>' component in the return statement:
#+begin_src js
  return (
    <Draggable>
      <Resizable
        id={id}
        className="imgClass"
        defaultSize={{
          width: 200,
          height: 360,
        }}
        style={{
          background: `url(${photoLink})`,
          backgroundSize: "contain",
          backgroundRepeat: "no-repeat",
        }}
        lockAspectRatio={true}
      >
        <button onClick={handleDeletePhoto}>❌</button>
      </Resizable>
    </Draggable>
  );
#+end_src

Then, I created a callback function within the 'Photo.js' child component called 'handleDeletePhoto' which made a fetch() request using the 'id' value I had passed down to delete it from 'db.json':
#+begin_src js
  function handleDeletePhoto(e) {
    console.log("handleDeleteImage() function called");
    console.log("e: ", e);
    let id = e.target.parentElement["id"];

    fetch(`http://localhost:3000/photos/${id}`, {
      method: "DELETE",
    })
      .then((response) => response.json())
      .then(() => {
        console.log("Delete request success!");
        onDeletePhoto(id);
      });
  }
#+end_src

If you notice closely for the statement above, the very last section calls 'onDeletePhoto' which is a callback function present within the parent, 'Board.js' component.

Within the parent 'Board.js' component, I then utilized its own local version of this same function called 'handleDeletePhoto' which then basically filtered the 'photos' array with an appropriate .filter() accordingly so that all items EXCEPT the deleted photo are set to the 'photos' set variable:
#+begin_src js
  function handleDeletePhoto(id) {
    const updatedPhotosArray = photos.filter((photo) => photo.id !== id);
    console.log(
      "updatedPhotosArray from handleDeletePhoto() function: ",
      updatedPhotosArray
    );
    setPhotos(updatedPhotosArray);
  }
#+end_src

Finally, I made sure that the 'useEffect' block within the 'Board.js' component actually updates with the correct 'photos' array as the second argument to 'useEffect':
#+begin_src js
  useEffect(() => {
    fetch("http://localhost:3000/photos", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    })
      .then((response) => response.json())
      .then((data) => {
        setPhotos(data);
      });
  }, [photos]);
#+end_src
** How I Fixed The Issue With 'polyfills' When Using The 'http.get()' Function Call For The 'image-size' Library
<2022-08-11 Thu 19:42>: In order to determine the width and the height of each image, I found this library and attempted to use it:
- https://github.com/image-size/image-size

I then installed the following npm libraries:
#+begin_src bash
npm install http
npm install url
npm install image-size
npm install fs
#+end_src

I installed the related package mentioned in the error:
#+begin_src bash
npm install path-browserify
#+end_src

As per this link, I found out that you can create a 'webpack.config.js' file in the root of your project directory:
- https://webpack.js.org/configuration/

Then, I used the instructions found in this blog post:
- https://namespaceit.com/blog/how-fix-breaking-change-webpack-5-used-to-include-polyfills-for-nodejs-core-modules-by-default-error

I used 'Solution 3' by installing 'path-browserify':
#+begin_src bash
npm install path-browserify
#+end_src

I then used the following within 'webpack.config.js':
#+begin_src js
module.exports = {
    ...
    resolve: {
        alias: {
            path: require.resolve("path-browserify")
        }
    }
};
#+end_src
